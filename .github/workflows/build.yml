name: Build Kivy Android APK

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build-android:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Set up Java (Temurin 17)
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      - name: Set up Python 3.9
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y ant \
            git python3-pip build-essential python3-dev \
            ffmpeg libsdl2-dev libsdl2-image-dev libsdl2-mixer-dev libsdl2-ttf-dev \
            libportmidi-dev libswscale-dev libavformat-dev libavcodec-dev zlib1g-dev \
            libgstreamer1.0 gstreamer1.0-plugins-base gstreamer1.0-plugins-good \
            autoconf automake libtool pkg-config libltdl-dev libffi-dev libssl-dev \
            cmake unzip wget coreutils

      - name: Install Python and Buildozer dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install Cython==0.29.33 buildozer==1.5.0 "sh>=2,<3"
          pip install git+https://github.com/kivy/python-for-android.git@develop
          sudo apt-get update
          sudo apt-get install -y build-essential python3-dev python3-pip git \
            libffi-dev libssl-dev libsqlite3-dev zlib1g-dev \
            libncurses5-dev libncursesw5-dev libreadline-dev \
            libgdbm-dev libbz2-dev liblzma-dev openjdk-17-jdk

      - name: Ensure Android Command-line Tools
        run: |
          sudo mkdir -p /usr/local/lib/android
          wget https://dl.google.com/android/repository/commandlinetools-linux-11076708_latest.zip -O cmdline-tools.zip
          sudo unzip cmdline-tools.zip -d /usr/local/lib/android/
          sudo mkdir -p /usr/local/lib/android/sdk/cmdline-tools
          sudo mv /usr/local/lib/android/cmdline-tools /usr/local/lib/android/sdk/cmdline-tools/latest
          sudo yes | /usr/local/lib/android/sdk/cmdline-tools/latest/bin/sdkmanager --licenses
          sudo /usr/local/lib/android/sdk/cmdline-tools/latest/bin/sdkmanager "platform-tools" "platforms;android-30" "build-tools;30.0.3"
          # Download commandline-tools if not present
          ANDROID_SDK_ROOT="/usr/local/lib/android/sdk"
          mkdir -p "$ANDROID_SDK_ROOT/cmdline-tools"
          cd "$ANDROID_SDK_ROOT/cmdline-tools"
          if [ ! -d "latest" ]; then
            wget https://dl.google.com/android/repository/commandlinetools-linux-11076708_latest.zip -O cmdline-tools.zip
            unzip cmdline-tools.zip
            mv cmdline-tools latest
          fi
          export PATH="$ANDROID_SDK_ROOT/cmdline-tools/latest/bin:$PATH"

      - name: Fix NDK Path
        run: |
          echo "Removendo NDK conflitante..."
          sudo rm -rf /usr/local/lib/android/sdk/ndk/27.2.12479018
          echo "ANDROID_NDK_HOME=/usr/local/lib/android/sdk/ndk/25.2.9519653" >> $GITHUB_ENV
          echo "ANDROID_NDK_ROOT=/usr/local/lib/android/sdk/ndk/25.2.9519653" >> $GITHUB_ENV

      - name: Configure Android SDK
        run: |
          ANDROID_HOME="/usr/local/lib/android/sdk"
          echo "ANDROID_HOME=${ANDROID_HOME}" >> $GITHUB_ENV

          # Atualiza PATH
          echo "${ANDROID_HOME}/cmdline-tools/latest/bin:${ANDROID_HOME}/platform-tools" >> $GITHUB_PATH
          export PATH="${ANDROID_HOME}/cmdline-tools/latest/bin:${ANDROID_HOME}/platform-tools:$PATH"

          # Corrige estrutura legada esperada pelo Buildozer
          # Buildozer espera que sdkmanager esteja em tools/bin (legado)
          sudo mkdir -p ${ANDROID_HOME}/tools/bin
          sudo ln -sf ${ANDROID_HOME}/cmdline-tools/latest/bin/sdkmanager ${ANDROID_HOME}/tools/bin/sdkmanager
          sudo ln -sf ${ANDROID_HOME}/cmdline-tools/latest/bin/avdmanager ${ANDROID_HOME}/tools/bin/avdmanager

          echo "Symlinks criados:"
          ls -la ${ANDROID_HOME}/tools/bin

          # Aceita licenças e instala componentes obrigatórios
          yes | ${ANDROID_HOME}/tools/bin/sdkmanager --licenses
          ${ANDROID_HOME}/tools/bin/sdkmanager \
            "platform-tools" \
            "platforms;android-33" \
            "build-tools;33.0.0" \
            "ndk;25.2.9519653"

          echo "ANDROID_NDK_HOME=${ANDROID_HOME}/ndk/25.2.9519653" >> $GITHUB_ENV

      - name: Prepare Build Environment
        run: |
          echo "P4A_IGNORE_WARNINGS=1" >> $GITHUB_ENV
          echo "PYTHON_FORCE_REINSTALL=1" >> $GITHUB_ENV
          echo "MAKEFLAGS=-j1" >> $GITHUB_ENV
          echo "CFLAGS=-Wno-error=implicit-function-declaration -Wno-unused-parameter -Wno-missing-field-initializers" >> $GITHUB_ENV
          echo "CPPFLAGS=\$CFLAGS" >> $GITHUB_ENV
          mkdir -p ~/.buildozer
          chmod -R 777 ~/.buildozer
          if [ ! -f buildozer.spec ]; then buildozer init; fi

      - name: Cache buildozer and gradle dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.buildozer
            ~/.cache/pip
            ~/.gradle/caches
          key: ${{ runner.os }}-buildozer-${{ hashFiles('buildozer.spec') }}

      - name: Build APK with logging
        id: build
        run: |
          set -ex
          for i in 1 2 3; do
            buildozer --verbose android debug && break || sleep 30
          done
          mkdir -p build_logs
          {
            echo "=== INÍCIO DO BUILD ==="
            buildozer --verbose android debug
            echo "=== FIM DO BUILD ==="
          } > build_logs/full.log 2>&1 || {
            echo "=== BUILD FALHOU ==="
            grep -iE 'error|fail|exception' build_logs/full.log | head -n 50 || true
            exit 1
          }

          if ! find .buildozer -name "*.apk" | grep -q .; then
            echo "=== ERRO: APK NÃO GERADO ==="
            tail -n 50 build_logs/full.log
            exit 1
          fi

      - name: Prepare Logs for Artifact
        if: always()
        run: |
          mkdir -p build_logs
          touch build_logs/empty.log

          # Coleta logs sem falhar se não houver nenhum
          find .buildozer -name "*.log" -exec cp --parents {} build_logs/ \; || echo "Nenhum log encontrado em .buildozer"

          [ -f build.log ] && cp build.log build_logs/ || echo "build.log não encontrado"
          [ -f build-full.log ] && cp build-full.log build_logs/ || echo "build-full.log não encontrado"

      - name: Upload build logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: build-logs
          path: build_logs/
          retention-days: 3
