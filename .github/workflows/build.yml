name: Build
on: [push, pull_request]

jobs:
  build-android:
    name: Build Android APK
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Fix apt locks (if any)
        run: |
          sudo rm -f /var/lib/apt/lists/lock
          sudo rm -f /var/cache/apt/archives/lock
          sudo rm -f /var/lib/dpkg/lock
          sudo dpkg --configure -a

      - name: Ensure python3-pip is installed
        run: |
          sudo apt-get update
          sudo apt-get install -y python3-pip

      # Install Git as early as possible
      - name: Install and Verify Git
        run: |
          sudo apt-get update
          sudo apt-get install -y git
          echo "Git installed:"
          which git
          git --version

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'

      - name: Configure Git
        run: |
          git --version
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

      - name: Cache Python dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          export PIP_CACHE_DIR=/tmp/.cache/pip
          sudo apt-get update
          sudo apt-get install -y git
          python -m pip install --upgrade pip
          pip install --upgrade Cython==0.29.33
          pip install --upgrade buildozer==1.5.0
          pip install --upgrade virtualenv
          pip install --upgrade wheel
          pip install --upgrade setuptools

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y git python3-pip build-essential python3-dev \
            ffmpeg libsdl2-dev libsdl2-image-dev libsdl2-mixer-dev libsdl2-ttf-dev \
            libportmidi-dev libswscale-dev libavformat-dev libavcodec-dev zlib1g-dev \
            libgstreamer1.0 gstreamer1.0-plugins-base gstreamer1.0-plugins-good \
            autoconf automake libtool pkg-config libltdl-dev libffi-dev libssl-dev \
            ccache cmake unzip wget

      - name: Install python3-pip
        run: |
          sudo apt-get update
          sudo apt-get install -y python3-pip

      - name: Debug environment
        run: |
          echo "ID: $(id)"
          echo "OS: $(uname -a)"
          echo "Available package managers:"
          command -v apt-get || echo "apt-get not found"
          command -v yum || echo "yum not found"
          command -v apk || echo "apk not found"
          command -v dnf || echo "dnf not found"
          command -v pip || echo "pip not found"

      - name: Fix pip permissions
        run: |
          python3 -m pip install --upgrade pip setuptools wheel
          mkdir -p ~/.cache/pip ~/.buildozer
          chmod -R 777 ~/.cache/pip ~/.buildozer

      - name: Configure ccache
        run: |
          sudo /usr/sbin/update-ccache-symlinks
          echo 'export PATH="/usr/lib/ccache:$PATH"' | tee -a ~/.bashrc

      - name: Cache Buildozer global directory
        uses: actions/cache@v4
        with:
          path: ~/.buildozer
          key: ${{ runner.os }}-${{ hashFiles('buildozer.spec') }}
          restore-keys: |
            ${{ runner.os }}-buildozer

      - name: Clean and prepare environment
        run: |
          echo 'export ANDROID_HOME=/usr/local/lib/android/sdk' >> ~/.bashrc
          echo 'export PATH=$ANDROID_HOME/cmdline-tools/latest/bin:$PATH' >> ~/.bashrc
          export ANDROID_NDK_HOME=/usr/local/lib/android/sdk/ndk/25.2.9519653
          export PATH=$PATH:~/.local/bin/
          echo $ANDROID_HOME
          echo $ANDROID_NDK_HOME
          echo $PATH
          source ~/.bashrc
          
      - name: Download and Set Up Android SDK Command-line Tools
        run: |
          export ANDROID_HOME=/usr/local/lib/android/sdk
          mkdir -p $ANDROID_HOME/cmdline-tools
          wget https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip
          unzip commandlinetools-linux-9477386_latest.zip -d $ANDROID_HOME/cmdline-tools
          mv $ANDROID_HOME/cmdline-tools/cmdline-tools $ANDROID_HOME/cmdline-tools/latest
          rm commandlinetools-linux-9477386_latest.zip
          export PATH=$ANDROID_HOME/cmdline-tools/latest/bin:$PATH
          echo "sdkmanager path: $(command -v sdkmanager)"

      - name: Set up Android SDK environment variables
        run: |
          echo "ANDROID_HOME=/usr/local/lib/android/sdk" >> $GITHUB_ENV
          echo "ANDROID_NDK_HOME=/usr/local/lib/android/sdk/ndk/25.2.9519653" >> $GITHUB_ENV
          echo "PATH=$PATH:/usr/local/lib/android/sdk/cmdline-tools/latest/bin" >> $GITHUB_ENV

      - name: Ensure sdkmanager is executable
        run: |
          chmod +x /usr/local/lib/android/sdk/cmdline-tools/latest/bin/sdkmanager
          
      - name: Accept Android SDK Licenses and Install Tools
        run: |
          export ANDROID_HOME=/usr/local/lib/android/sdk
          export PATH=$ANDROID_HOME/cmdline-tools/latest/bin:$PATH
          yes | sdkmanager --licenses
          sdkmanager "platforms;android-33" "build-tools;33.0.0" "ndk;25.2.9519653"
          
      - name: Verify sdkmanager Installation
        run: |
          export ANDROID_HOME=/usr/local/lib/android/sdk
          export ANDROID_NDK_HOME=/usr/local/lib/android/sdk/ndk/25.2.9519653
          export PATH=$ANDROID_HOME/cmdline-tools/latest/bin:$PATH
          
      - name: Install Buildozer
        run: |
          sudo apt-get update
          sudo apt-get install -y zlib1g-dev libncurses5-dev libffi-dev libssl-dev
          python3 -m pip install --upgrade Cython==0.29.33 buildozer==1.5.0
        
      - name: Set up Android SDK & NDK
        run: |
          mkdir -p $HOME/.buildozer
          chmod 777 $HOME/.buildozer
          export PATH=$PATH:~/.local/bin/

      - name: Debug Buildozer Configuration
        run: |
          cat buildozer.spec

      - name: Set Buildozer Environment
        run: |
          export PATH=/usr/bin:$PATH:~/.local/bin/
          echo "PATH: $PATH"
          command -v git
          git --version

      - name: Check Network Connectivity
        run: |
          ping -c 4 google.com || echo "Network is unreachable"

      - name: Fix Permissions for Buildozer
        run: |
          mkdir -p ~/.buildozer
          chmod -R 777 ~/.buildozer
          echo "Buildozer environment fixed"
          
      - name: Build with Buildozer
        env:
          BUILDOZER_WARN_ON_ROOT: 0
          ANDROID_HOME: /usr/local/lib/android/sdk
          ANDROID_NDK_HOME: /usr/local/lib/android/sdk/ndk/25.2.9519653
          JAVA_HOME: /usr/lib/jvm/temurin-17-jdk-amd64
          PATH: /usr/bin:$PATH:~/.local/bin/
          PYTHONPATH: ${{ github.workspace }}
        run: |
          set -x
          echo "Verifying Git..."
          command -v git
          git --version
          echo "Starting Buildozer..."
          for i in {1..3}; do
            buildozer android debug && break || echo "Retrying Buildozer... ($i/3)"
            sleep 5
          done
          cat .buildozer/android/app/buildozer.log || true  # Print log on failure

      - name: Verify APK Output
        run: |
          ls -al bin/
          
      - name: Upload APK
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: app-debug
          path: .buildozer/android/platform/build-*/build/outputs/apk/debug/*.apk
          if-no-files-found: error
          retention-days: 90

      - name: Upload Logs (if build fails)
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: buildozer-logs
          path: |
            .buildozer/android/platform/build-*/build/outputs/logs/*
            .buildozer/android/platform/build-*/build/outputs/apk/debug/*
            .buildozer/android/app/buildozer.log
          retention-days: 30
