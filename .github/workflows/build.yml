name: Build Kivy Android APK

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build-android:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Set up Python 3.9
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            git python3-pip build-essential python3-dev \
            ffmpeg libsdl2-dev libsdl2-image-dev libsdl2-mixer-dev libsdl2-ttf-dev \
            libportmidi-dev libswscale-dev libavformat-dev libavcodec-dev zlib1g-dev \
            libgstreamer1.0 gstreamer1.0-plugins-base gstreamer1.0-plugins-good \
            autoconf automake libtool pkg-config libltdl-dev libffi-dev libssl-dev \
            cmake unzip wget coreutils

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install --upgrade \
            Cython==0.29.33 \
            buildozer==1.5.0 \
            "sh>=2,<3" \
            git+https://github.com/kivy/python-for-android.git@develop

      - name: Configure Android SDK
        run: |
          ANDROID_HOME="/usr/local/lib/android/sdk"
          echo "ANDROID_HOME=${ANDROID_HOME}" >> $GITHUB_ENV
          
          # Configura o PATH corretamente
          echo "${ANDROID_HOME}/cmdline-tools/latest/bin:${ANDROID_HOME}/platform-tools" >> $GITHUB_PATH
          export PATH="${ANDROID_HOME}/cmdline-tools/latest/bin:${ANDROID_HOME}/platform-tools:$PATH"
          
          # Cria symlink necessário para o Buildozer
          sudo mkdir -p ${ANDROID_HOME}/tools/bin
          sudo ln -sf ${ANDROID_HOME}/cmdline-tools/latest/bin/sdkmanager ${ANDROID_HOME}/tools/bin/sdkmanager
          sudo ln -sf ${ANDROID_HOME}/cmdline-tools/latest/bin/avdmanager ${ANDROID_HOME}/tools/bin/avdmanager
          
          # Verifica instalação
          echo "Verificando instalação do SDK..."
          ls -la ${ANDROID_HOME}/cmdline-tools/latest/bin/
          which sdkmanager || echo "sdkmanager não encontrado"
          
          # Aceita licenças e instala componentes
          yes | sdkmanager --licenses
          sdkmanager "platform-tools" "platforms;android-33" "build-tools;33.0.0" "ndk;25.2.9519653"
          
          echo "ANDROID_NDK_HOME=${ANDROID_HOME}/ndk/25.2.9519653" >> $GITHUB_ENV

      - name: Prepare Build Environment
        run: |
          # Ignora warnings específicos
          export CFLAGS="-Wno-error=implicit-function-declaration -Wno-unused-parameter -Wno-missing-field-initializers"
          export CPPFLAGS="$CFLAGS"
          echo "CFLAGS=$CFLAGS" >> $GITHUB_ENV
    
          # Instala docwriter se necessário
          pip install docwriter || echo "Docwriter não instalado - continuando sem documentação"
    
          # Configurações específicas para python-for-android
          echo "export P4A_IGNORE_WARNINGS=1" >> $GITHUB_ENV
          echo "export PYTHON_FORCE_REINSTALL=1" >> $GITHUB_ENV
          mkdir -p ~/.buildozer
          chmod -R 777 ~/.buildozer
          if [ ! -f buildozer.spec ]; then
            buildozer init
          fi

      - name: Test Network Connectivity
        continue-on-error: true
        run: |
          echo "Testando conectividade com repositórios essenciais..."
          ping -c 3 github.com || echo "Falha no ping"
          curl -I https://github.com || echo "Falha no curl github.com"
          curl -I https://pypi.org || echo "Falha no curl pypi.org"
          echo "Teste de download pequeno:"
          curl -o /dev/null --show-error --fail https://github.com/kivy/python-for-android/archive/refs/heads/master.zip || echo "Falha no download"

      - name: Verify Environment
        run: |
          echo "=== VERIFICAÇÃO DO AMBIENTE ==="
          echo "Buildozer version:"
          buildozer --version || echo "Buildozer não disponível"
          echo "Android SDK:"
          ls -la $ANDROID_HOME
          echo "Android NDK:"
          ls -la $ANDROID_NDK_HOME
          echo "Java:"
          java -version
          echo "Python:"
          python --version
          echo "PATH:"
          echo $PATH

      - name: Verify Android Tools
        run: |
          echo "Verificando instalação do Android SDK..."
          ls -la $ANDROID_HOME
          echo "Verificando NDK..."
          ls -la $ANDROID_NDK_HOME
          echo "Verificando sdkmanager..."
          which sdkmanager || echo "sdkmanager não encontrado"
          sdkmanager --list || echo "Falha ao executar sdkmanager"

      - name: Fix NDK Path
        run: |
          echo "Removendo NDK conflitante..."
          sudo rm -rf /usr/local/lib/android/sdk/ndk/27.2.12479018
          echo "ANDROID_NDK_HOME=/usr/local/lib/android/sdk/ndk/25.2.9519653" >> $GITHUB_ENV

      - name: Cache Buildozer Dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.buildozer
            ~/.cache/pip
            ~/.gradle/caches
          key: ${{ runner.os }}-buildozer-${{ hashFiles('buildozer.spec') }}

      - name: Build APK with Proper Logging
        id: build
        run: |
          set -ex
    
          # 1. Criar diretório para logs
          mkdir -p build_logs
    
          # 2. Executar build com redirecionamento de logs
          {
            echo "=== INÍCIO DO BUILD ==="
            buildozer --verbose android debug
            echo "=== FIM DO BUILD ==="
          } > build_logs/full.log 2>&1 || {
            echo "=== BUILD FALHOU ==="
            [ -f build_logs/full.log ] && {
              echo "Erros encontrados:"
              grep -i -E "error|fail|exception" build_logs/full.log | head -n 50
            }
            exit 1
          }
    
          # 3. Verificar se o APK foi gerado
          if ! find .buildozer -name "*.apk" | grep -q .; then
            echo "=== ERRO: APK NÃO GERADO ==="
            [ -f build_logs/full.log ] && {
              echo "Últimas 50 linhas do log:"
              tail -n 50 build_logs/full.log
            }
            exit 1
          fi

      - name: Prepare Logs for Artifact
        if: always()
        run: |
          # Garante que temos pelo menos um arquivo de log vazio se nada for encontrado
          mkdir -p build_logs
          touch build_logs/empty.log
    
          # Coleta todos os logs relevantes
          find .buildozer -name "*.log" -exec cp {} build_logs \;
          [ -f build.log ] && cp build.log build_logs/
          [ -f build-full.log ] && cp build-full.log build_logs/

      - name: Upload Build Logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: build-logs
          path: build_logs/
          retention-days: 3
